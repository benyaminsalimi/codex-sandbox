name: Auto Update Codex

on:
  schedule:
    # Run daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  GHCR_IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: ${{ github.repository_owner }}/codex-sandbox

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version-check.outputs.new-version }}
      should-build: ${{ steps.version-check.outputs.should-build }}
    steps:
      - name: Get latest @openai/codex version
        id: get-latest
        run: |
          LATEST_VERSION=$(npm view @openai/codex version)
          echo "latest-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "Latest @openai/codex version: $LATEST_VERSION"

      - name: Check if image exists with this version
        id: version-check
        run: |
          LATEST_VERSION="${{ steps.get-latest.outputs.latest-version }}"
          
          # Check if image with this version tag already exists in GHCR
          if docker manifest inspect "$GHCR_REGISTRY/$GHCR_IMAGE_NAME:$LATEST_VERSION" >/dev/null 2>&1; then
            echo "Image with version $LATEST_VERSION already exists in GHCR"
            echo "should-build=false" >> "$GITHUB_OUTPUT"
          else
            echo "Image with version $LATEST_VERSION does not exist, triggering build"
            echo "should-build=true" >> "$GITHUB_OUTPUT"
            echo "new-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          fi

  build-amd64:
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-24.04
    needs: check-version
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Free disk
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          docker system prune -af || true
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build & push (amd64)
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:amd64-${{ needs.check-version.outputs.new-version }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:amd64-${{ needs.check-version.outputs.new-version }}
          # Use GHA cache only (works on PRs). Swap to registry cache on pushes if you prefer.
          cache-from: type=gha,scope=${{ github.workflow }}-${{ runner.os }}-amd64
          cache-to:   type=gha,mode=min,scope=${{ github.workflow }}-${{ runner.os }}-amd64
          provenance: false
          sbom: false
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  build-arm64:
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-24.04-arm
    needs: check-version
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Free disk
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          docker system prune -af || true
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build & push (arm64)
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}:arm64-${{ needs.check-version.outputs.new-version }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:arm64-${{ needs.check-version.outputs.new-version }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ runner.os }}-arm64
          cache-to:   type=gha,mode=min,scope=${{ github.workflow }}-${{ runner.os }}-arm64
          provenance: false
          sbom: false
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  manifest-and-attest:
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    needs: [check-version, build-amd64, build-arm64]
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Stitch multi-arch manifest for GitHub Container Registry (:latest and :version)
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          docker buildx imagetools create \
            -t "$GHCR_REGISTRY/$GHCR_IMAGE_NAME:latest" \
            -t "$GHCR_REGISTRY/$GHCR_IMAGE_NAME:$NEW_VERSION" \
            "$GHCR_REGISTRY/$GHCR_IMAGE_NAME@${{ needs.build-amd64.outputs.digest }}" \
            "$GHCR_REGISTRY/$GHCR_IMAGE_NAME@${{ needs.build-arm64.outputs.digest }}"

      - name: Stitch multi-arch manifest for Docker Hub (:latest and :version)
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          docker buildx imagetools create \
            -t "$DOCKERHUB_REGISTRY/$DOCKERHUB_IMAGE_NAME:latest" \
            -t "$DOCKERHUB_REGISTRY/$DOCKERHUB_IMAGE_NAME:$NEW_VERSION" \
            "$DOCKERHUB_REGISTRY/$DOCKERHUB_IMAGE_NAME@${{ needs.build-amd64.outputs.digest }}" \
            "$DOCKERHUB_REGISTRY/$DOCKERHUB_IMAGE_NAME@${{ needs.build-arm64.outputs.digest }}"

      - name: Get GHCR manifest digest
        id: ghcr-manifest
        run: |
          DIGEST=$(docker buildx imagetools inspect "$GHCR_REGISTRY/$GHCR_IMAGE_NAME:latest" | awk '/^Digest:/{print $2; exit}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Get Docker Hub manifest digest
        id: dockerhub-manifest
        run: |
          DIGEST=$(docker buildx imagetools inspect "$DOCKERHUB_REGISTRY/$DOCKERHUB_IMAGE_NAME:latest" | awk '/^Digest:/{print $2; exit}')
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation for GHCR
        uses: actions/attest-build-provenance@v2
        with:
          push-to-registry: true
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
          subject-digest: ${{ steps.ghcr-manifest.outputs.digest }}

      - name: Generate artifact attestation for Docker Hub
        uses: actions/attest-build-provenance@v2
        with:
          push-to-registry: true
          subject-name: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          subject-digest: ${{ steps.dockerhub-manifest.outputs.digest }}

      - name: Notify about new version
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          echo "ðŸŽ‰ Successfully built and pushed new version: $NEW_VERSION"
          echo "ðŸ“¦ Images available at:"
          echo "  - ghcr.io/$GHCR_IMAGE_NAME:$NEW_VERSION"
          echo "  - ghcr.io/$GHCR_IMAGE_NAME:latest"
          echo "  - $DOCKERHUB_IMAGE_NAME:$NEW_VERSION"
          echo "  - $DOCKERHUB_IMAGE_NAME:latest"